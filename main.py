import os
import logging
import pandas as pd
import io
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

@router.message(Command("start"))
async def cmd_start(message: Message):
    text = """
ü§ñ <b>–ü–∞—Ä—Å–µ—Ä Excel –≤ TXT</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls) - —è –∏–∑–≤–ª–µ–∫—É –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏ –≤–µ—Ä–Ω—É —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ë–µ—Ä—É –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (—Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏)
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è—é –¥–∞–Ω–Ω—ã–µ
"""
    await message.answer(text, parse_mode=ParseMode.HTML)

class ExcelProcessor:
    def __init__(self):
        self.all_data = []
    
    def process_file(self, file_bytes: bytes) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"""
        df = pd.read_excel(io.BytesIO(file_bytes), header=None)
        column_data = df.iloc[1:, 0].dropna().astype(str).tolist()
        self.all_data.extend(column_data)
        return len(column_data)
    
    def get_result_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        return "\n".join(self.all_data)

processor = ExcelProcessor()

@router.message(F.document)
async def handle_excel_files(message: Message):
    try:
        document = message.document
        file_name = document.file_name or "file"
        
        if not file_name.lower().endswith(('.xlsx', '.xls')):
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)")
            return
        
        processing_msg = await message.answer(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {file_name}...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.download(document)
        file_bytes = await file.read()
        
        records_count = processor.process_file(file_bytes)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        result_text = processor.get_result_text()
        result_file = BufferedInputFile(
            result_text.encode('utf-8'),
            filename=f"result_{file_name.split('.')[0]}.txt"
        )
        
        await message.answer_document(
            document=result_file,
            caption=f"‚úÖ {file_name}\nüìä –ó–∞–ø–∏—Å–µ–π: {records_count}\nüìÅ –í—Å–µ–≥–æ: {len(processor.all_data)}"
        )
        
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"Error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
